id: postgres_taxi
namespace: datacamp_zoom

# Task : get several inputs
inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi type
    values: [ 'yellow', 'green' ]
    defaults: 'yellow'

  - id: year
    type: SELECT
    displayName: Select a year
    values: [ '2019', '2020' ]
    defaults: '2020'

  - id: month
    type: SELECT
    displayName: Select a month
    values: [ '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12' ]
    defaults: '01'

variables:
  file: "{{inputs.taxi}}_tripdata_{{inputs.year}}-{{inputs.month}}.csv"
  staging_table: "public.{{inputs.taxi}}_tripadta_staging"
  table: "public.{{inputs.taxi}}_tripdata"
  data: "{{ outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ inputs.year ~ '-' ~ inputs.month ~ '.csv.gz'] }}"

# Task : download file
tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process # Adjust indentation
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz | gunzip >{{render(vars.file)}}


  - id: debug_files
    type: io.kestra.plugin.core.log.Log
    message: "{{ outputs.extract.outputFiles }}"

  - id: list_files
    type: io.kestra.plugin.fs.sftp.List
    host: your_sftp_host
    port: "22"
    username: your_username
    password: your_password
    from: "/path/to/directory/"
    # regExp: ".*\.csv"



  # Task : Create a  table in PostgreSQL
  - id: create_table
    type: io.kestra.plugin.jdbc.postgresql.Query
    sql: |
      CREATE TABLE IF NOT EXISTS {{render(vars.table)}} (
          id SERIAL PRIMARY KEY,
          filename TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          VendorID INTEGER,
          lpep_pickup_datetime TIMESTAMP,
          lpep_dropoff_datetime TIMESTAMP,
          store_and_fwd_flag TEXT,
          RatecodeID INTEGER,
          PULocationID TEXT,
          DOLocationID TEXT,
          passenger_count INTEGER,
          trip_distance DOUBLE PRECISION,
          fare_amount DOUBLE PRECISION,
          extra DOUBLE PRECISION,
          mta_tax DOUBLE PRECISION,
          tip_amount DOUBLE PRECISION,
          tolls_amount DOUBLE PRECISION,
          ehail_fee DOUBLE PRECISION,
          improvement_surcharge DOUBLE PRECISION,
          total_amount DOUBLE PRECISION,
          payment_type INTEGER,
          trip_type INTEGER,
          congestion_surcharge DOUBLE PRECISION
      );

  # Task : Create a staging table in PostgreSQL
  - id: create_staging_table
    type: io.kestra.plugin.jdbc.postgresql.Query
    sql: |
      CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} (
          id SERIAL PRIMARY KEY,
          filename TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          VendorID INTEGER,
          lpep_pickup_datetime TIMESTAMP,
          lpep_dropoff_datetime TIMESTAMP,
          store_and_fwd_flag TEXT,
          RatecodeID INTEGER,
          PULocationID TEXT,
          DOLocationID TEXT,
          passenger_count INTEGER,
          trip_distance DOUBLE PRECISION,
          fare_amount DOUBLE PRECISION,
          extra DOUBLE PRECISION,
          mta_tax DOUBLE PRECISION,
          tip_amount DOUBLE PRECISION,
          tolls_amount DOUBLE PRECISION,
          ehail_fee DOUBLE PRECISION,
          improvement_surcharge DOUBLE PRECISION,
          total_amount DOUBLE PRECISION,
          payment_type INTEGER,
          trip_type INTEGER,
          congestion_surcharge DOUBLE PRECISION
      );




  - id: copy_data_from_table_to_staging_table
    type: io.kestra.plugin.jdbc.postgresql.CopyIn
    columns: [
        "VendorID", "lpep_pickup_datetime", "lpep_dropoff_datetime", "store_and_fwd_flag",
        "RatecodeID", "PULocationID", "DOLocationID", "passenger_count", "trip_distance",
        "fare_amount", "extra", "mta_tax", "tip_amount", "tolls_amount", "ehail_fee",
        "improvement_surcharge", "total_amount", "payment_type", "trip_type",
         "congestion_surcharge"
          ]
    format: CSV
    from: "{{render(vars.data)}}" # Use the output file from the extract task
    header: true
    table: "{{render(vars.staging_table)}}"

  # Task 3: Verify the copied data
  # - id: verify_data
  #   type: io.kestra.plugin.jdbc.postgresql.Query
  #   sql: |
  #     SELECT * FROM staging_table;
  #   store: true  # Store the result for logging

  # # Task 4: Log the results
  # - id: log_results
  #   type:  "io.kestra.plugin.core.log.Log"
  #   message: "{{ outputs.verify_data.rows }}"  # Log the rows from the staging table


  # Postgres connection 
pluginDefaults:
  - type: "io.kestra.plugin.jdbc.postgresql"
    values:
      url: "jdbc:postgresql://host.docker.internal:5432/postgres-zoomcamp"
      username: "myuser"
      password: "mypassword"
